
@*
// Group 7
// Names: Abdurahman, Anamika, Dinh Anh, Max
// Project Description: This is our Restaraunt Manager application.
// In this application we allow the user to add employees, food items, and food orders in a restaraunt
*@
@page "/manageemployee"

@inject IJSRuntime JSRuntime

<div class="topbar">
    <button @onclick="() => ShowEmployeeModal(new Employee())">Add New Employee</button>
</div>

<div class="body-container">
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Email</th>
                <th>Phone</th>
                <th>Age</th>
                <th>Position</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in searchEmployees)
            {
                <tr>
                    <td>@employee.EmployeeId</td>
                    <td>@employee.FirstName</td>
                    <td>@employee.LastName</td>
                    <td>@employee.Email</td>
                    <td>@employee.Phone</td>
                    <td>@employee.Age</td>
                    <td>@employee.Position</td>
                    <td>
                        <button class="update" @onclick="() => ShowEmployeeModal(employee)">Update</button>
                        <button class="delete" @onclick="() => DeleteEmployee(employee.EmployeeId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@if (isEmployeeModalVisible)
{
    <div class="modal">
        <div class="modal-content">
            <span @onclick="CloseEmployeeModal" class="close">&times;</span>
            <EditForm Model="editingEmployee" class="form" OnValidSubmit="HandleEmployeeValidSubmit">
                <div class="item1">
                    <label style="white-space: pre;">First Name: <InputText class="input-text" @bind-Value="editingEmployee.FirstName" /></label>
                </div>
                <div class="item2">
                    <label style="white-space: pre;">Last Name: <InputText class="input-text" @bind-Value="editingEmployee.LastName" /></label>
                </div>
                <div class="item3">
                    <label style="white-space: pre;">Email:         <InputText class="input-text" @bind-Value="editingEmployee.Email" /></label>
                </div>
                <div class="item4">
                    <label style="white-space: pre;">Phone:        <InputText class="input-text" @bind-Value="editingEmployee.Phone" /></label>
                </div>
                <div class="item5">
                    <label style="white-space: pre;">Age:            <InputNumber class="input-number" @bind-Value="editingEmployee.Age" /></label>
                </div>
                <div class="item6">
                    <label style="white-space: pre;">Position:      <InputText class="input-text" @bind-Value="editingEmployee.Position" /></label>
                </div>
                <button type="submit">Save</button>
            </EditForm>
            @if (db.IsInfoCovered)
            {
                <div class="error-handling">You have to fill in all info before you can save.</div>
            }
        </div>
    </div>
}

<style>
    /* Styles for item info window */
    .modal {
        display: flex;
        background-color: rgba(0,0,0,0.4);
    }

    .modal-content {
        display: flex;
        justify-content: space-around;
        align-items: center;
        background-color: #fefefe;
        padding: 20px;
        border: 1px solid #888;
    }

    .close {
        color: #aaa;
        position: absolute;
        top: 0;
        right: 0;
        font-size: 28px;
        font-weight: bold;
        margin-top: 10px;
        margin-right: 25px;
    }

    .close:hover, .close:focus {
        color: black;
        text-decoration: none;
        cursor: pointer;
    }

    .form {
        grid-template-columns: auto auto;
        gap: 10px;
    }

    .item1, .item2, .item3, .item4, .item5, .item6 {
        display: flex;
        margin-top: 10px;
        margin-bottom: 5px;
    }

    .input-text, .input-number {
        width: 500px;
        padding: 5px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .item label {
        margin-bottom: 5px;
    }

    .form button {
        margin-top: 20px;
        padding: 5px 10px;
        background: linear-gradient(180deg, rgb(6, 0, 97), rgb(71, 0, 97));
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        width: 600px;
    }

    /* Styles for page info*/
    table {
        margin-top: 20px;
        width: 100%;
    }

    .update, .delete {
        display: inline-flex;
        justify-content: space-around;
        align-items: center;
        padding: 5px 10px;
        background: linear-gradient(180deg, rgb(6, 0, 97), rgb(71, 0, 97));
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        height: 25px;
    }

    /* Styles for topbar */
    .topbar {
        display: flex;
        flex-wrap: nowrap;
        align-items: center;
        justify-content: flex-start;
        gap: 10px;
    }

    .topbar button {
        display: inline-flex;
        justify-content: space-around;
        align-items: center;
        width: 100%;
        padding: 5px 10px;
        background: linear-gradient(180deg, rgb(6, 0, 97), rgb(71, 0, 97));
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }
</style>

@code {
    private List<Employee> employees = new List<Employee>();
    private List<Employee> searchEmployees = new List<Employee>();
    private Employee editingEmployee = new Employee();
    private Database db = new Database("Database3");
    private string searchTerm;
    private bool isEmployeeModalVisible = false;

    protected override void OnInitialized()
    {
        db.CreateDB();
        LoadEmployees();
    }

    private void LoadEmployees()
    {
        employees = db.LoadDBEmployee(); // Load from database or service
        searchEmployees = employees;
    }

    private void ShowEmployeeModal(Employee employee)
    {
        editingEmployee = employee;
        isEmployeeModalVisible = true;
    }

    private void CloseEmployeeModal()
    {
        isEmployeeModalVisible = false;
    }

    private void HandleEmployeeValidSubmit()
    {
        if (editingEmployee.EmployeeId == 0) // New employee
        {
            db.AddEmployee(editingEmployee.FirstName, editingEmployee.LastName, editingEmployee.Email, editingEmployee.Phone, editingEmployee.Age, editingEmployee.Position);
            if (db.IsInfoCovered == false)
            {
                CloseEmployeeModal();
            }
        }
        else // Existing employee
        {
            db.ModifyEmployee(editingEmployee.EmployeeId, editingEmployee.FirstName, editingEmployee.LastName, editingEmployee.Email, editingEmployee.Phone, editingEmployee.Age, editingEmployee.Position);
            if (db.IsInfoCovered == false)
            {
                CloseEmployeeModal();
            }
        }
        LoadEmployees();
    }

    private void DeleteEmployee(int employeeId)
    {
        db.RemoveEmployee(employeeId);
        LoadEmployees();
    }
}