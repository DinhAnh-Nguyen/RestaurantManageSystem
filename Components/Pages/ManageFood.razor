@page "/managefood"

@inject IJSRuntime JSRuntime

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

<div class="topbar">
        <input type="text" placeholder="Search food item..." @bind="searchTerm" @oninput="UpdateFilteredItems">
        <button><i class="fa fa-search"></i></button>
        <button @onclick="() => ShowModal(new FoodItem())">Add New Item</button>
</div>

<div class="body-container">
    <table>
        <thead>
            <tr>
                <th>Food Item</th>
                <th>Price</th>
                <th>Description</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var food in searchFoodItems)
            {
                <tr>
                    <td>@food.Name</td>
                    <td>@food.Cost.ToString("C")</td>
                    <td>@food.Description</td>
                    <td>
                        <button class="update" @onclick="() => ShowModal(food)">Update</button>
                        <button class="delete" @onclick="() => DeleteItem(food.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@if (isModalVisible)
{
    <div class="modal">
        <div class="modal-content">
            <span @onclick="CloseModal" class="close">&times;</span>
            <EditForm Model="editingItem" class="form" OnValidSubmit="HandleValidSubmit">
                <div class="item1">
                    <label style="white-space: pre;">Name:           <InputText class="input-text" @bind-Value="editingItem.Name" /></label>
                </div>
                <div class="item2">
                    <label style="white-space: pre;">Price:            <InputNumber class="input-number" @bind-Value="editingItem.Cost" /></label>
                </div>
                <div class="item3">
                    <label style="white-space: pre;">Description:  <InputText class="input-text" @bind-Value="editingItem.Description" /></label>
                    
                </div>
                <button type="submit">Save</button>
            </EditForm>

        </div>
    </div>
}

<style>
    /* Styles for item info window */
    .modal { 
        display: flex;
        background-color: rgba(0,0,0,0.4);
    }

    .modal-content {
        display: flex;
        justify-content: space-around;
        align-items: center;
        background-color: #fefefe;
        padding: 20px;
        border: 1px solid #888;
    }

    .close {
        color: #aaa;
        position: absolute;
        top: 0;
        right: 0;
        font-size: 28px;
        font-weight: bold;
        margin-top: 10px;
        margin-right: 25px;
    }

    .close:hover, .close:focus {
        color: black;
        text-decoration: none;
        cursor: pointer;
    }

    .form {
        grid-template-columns: auto auto;
        gap: 10px;
    }

    .item1, .item2, .item3 {
        display: flex;
        margin-top: 10px;
        margin-bottom: 5px;
    }

    .input-text, .input-number {
        width: 500px;
        padding: 5px;
        border: 1px solid #ccc;
        border-radius: 5px;
    } 
    
    .item label {
        margin-bottom: 5px;
    }

    .form button {
        margin-top: 20px;
        padding: 5px 10px;
        background: linear-gradient(180deg, rgb(6, 0, 97), rgb(71, 0, 97));
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        width: 600px;
    }

    .update, .delete {
        display: inline-flex;
        justify-content: space-around;
        align-items: center;
        padding: 5px 10px;
        background: linear-gradient(180deg, rgb(6, 0, 97), rgb(71, 0, 97));
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        height: 25px;
    }

    /* Styles for top-bar
    .topbar { display: flex; justify-content: space-between; padding: 10px; }
    .search-container input, .add-form input { width: 200px; margin-right: 10px; }
    .search-container button { padding: 5px 10px; background: linear-gradient(180deg, rgb(6, 0, 97), rgb(71, 0, 97)); color: white; border: none; border-radius: 5px; cursor: pointer; }
    input[type="text"], input[type="number"], textarea { width: 100%; } */

    table {
        margin-top: 20px; 
        width: 100%;
    }

    .topbar {
        display: flex;
        flex-wrap: nowrap;
        align-items: center;
        justify-content: flex-start;
        gap: 10px;
    }

    .topbar input[type="text"] {
        flex-grow: 1;
        padding: 5px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .topbar button {
        padding: 5px 10px;
        background: linear-gradient(180deg, rgb(6, 0, 97), rgb(71, 0, 97));
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }
</style>

@code {
    private List<FoodItem> foodItems = new List<FoodItem>();
    private List<FoodItem> searchFoodItems = new List<FoodItem>();
    private FoodItem editingItem = new FoodItem();
    private Database db = new Database("food-db5");
    private string searchTerm;
    private bool isModalVisible = false;

    protected override void OnInitialized()
    {
        db.CreateDB();
        LoadFoodItems();
    }

    private void LoadFoodItems()
    {
        foodItems = db.LoadDBFood(); // Load from database or service
        searchFoodItems = foodItems;
    }

    private void ShowModal(FoodItem food)
    {
        editingItem = food;
        isModalVisible = true;
    }

    private void CloseModal()
    {
        isModalVisible = false;
    }

    private void HandleValidSubmit()
    {
        if (editingItem.Id == 0) // New item
            db.AddFoodItem(editingItem.Name, editingItem.Cost, editingItem.Description, null);
        else // Existing item
            db.ModifyFoodItem(editingItem.Id, editingItem.Name, editingItem.Cost, editingItem.Description, null);

        //LoadFoodItems();
        UpdateFilteredItems();
        CloseModal();
    }

    private void UpdateFilteredItems()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            searchFoodItems = foodItems.ToList(); 
        }
        else
        {
            // Lowercase comparison for case-insensitive searching
            searchFoodItems = foodItems.Where(item => 
                item.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                item.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }

    private void DeleteItem(int id)
    {
        db.RemoveFoodItem(id);
         UpdateFilteredItems();
        //LoadFoodItems();
    }

    private void SearchFood()
    {
        
    }
}